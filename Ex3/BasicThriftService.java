/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package basictutorial;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2021-10-27")
public class BasicThriftService {

  public interface Iface {

    public long put(String key, int p2, long p3, String p4, List<Integer> p5, Map<String,String> p6, MyData p7) throws org.apache.thrift.TException;

    public void put2(String key, int p2, long p3, String p4, List<Integer> p5, Map<String,String> p6, MyData p7) throws org.apache.thrift.TException;

    public long put3(String key, int p2, long p3, String p4, List<Integer> p5, Map<String,String> p6, MyData p7) throws org.apache.thrift.TException;

    public MyValue get(String key) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void put(String key, int p2, long p3, String p4, List<Integer> p5, Map<String,String> p6, MyData p7, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void put2(String key, int p2, long p3, String p4, List<Integer> p5, Map<String,String> p6, MyData p7, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void put3(String key, int p2, long p3, String p4, List<Integer> p5, Map<String,String> p6, MyData p7, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get(String key, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public long put(String key, int p2, long p3, String p4, List<Integer> p5, Map<String,String> p6, MyData p7) throws org.apache.thrift.TException
    {
      send_put(key, p2, p3, p4, p5, p6, p7);
      return recv_put();
    }

    public void send_put(String key, int p2, long p3, String p4, List<Integer> p5, Map<String,String> p6, MyData p7) throws org.apache.thrift.TException
    {
      put_args args = new put_args();
      args.setKey(key);
      args.setP2(p2);
      args.setP3(p3);
      args.setP4(p4);
      args.setP5(p5);
      args.setP6(p6);
      args.setP7(p7);
      sendBase("put", args);
    }

    public long recv_put() throws org.apache.thrift.TException
    {
      put_result result = new put_result();
      receiveBase(result, "put");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "put failed: unknown result");
    }

    public void put2(String key, int p2, long p3, String p4, List<Integer> p5, Map<String,String> p6, MyData p7) throws org.apache.thrift.TException
    {
      send_put2(key, p2, p3, p4, p5, p6, p7);
    }

    public void send_put2(String key, int p2, long p3, String p4, List<Integer> p5, Map<String,String> p6, MyData p7) throws org.apache.thrift.TException
    {
      put2_args args = new put2_args();
      args.setKey(key);
      args.setP2(p2);
      args.setP3(p3);
      args.setP4(p4);
      args.setP5(p5);
      args.setP6(p6);
      args.setP7(p7);
      sendBaseOneway("put2", args);
    }

    public long put3(String key, int p2, long p3, String p4, List<Integer> p5, Map<String,String> p6, MyData p7) throws org.apache.thrift.TException
    {
      send_put3(key, p2, p3, p4, p5, p6, p7);
      return recv_put3();
    }

    public void send_put3(String key, int p2, long p3, String p4, List<Integer> p5, Map<String,String> p6, MyData p7) throws org.apache.thrift.TException
    {
      put3_args args = new put3_args();
      args.setKey(key);
      args.setP2(p2);
      args.setP3(p3);
      args.setP4(p4);
      args.setP5(p5);
      args.setP6(p6);
      args.setP7(p7);
      sendBase("put3", args);
    }

    public long recv_put3() throws org.apache.thrift.TException
    {
      put3_result result = new put3_result();
      receiveBase(result, "put3");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "put3 failed: unknown result");
    }

    public MyValue get(String key) throws org.apache.thrift.TException
    {
      send_get(key);
      return recv_get();
    }

    public void send_get(String key) throws org.apache.thrift.TException
    {
      get_args args = new get_args();
      args.setKey(key);
      sendBase("get", args);
    }

    public MyValue recv_get() throws org.apache.thrift.TException
    {
      get_result result = new get_result();
      receiveBase(result, "get");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void put(String key, int p2, long p3, String p4, List<Integer> p5, Map<String,String> p6, MyData p7, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      put_call method_call = new put_call(key, p2, p3, p4, p5, p6, p7, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class put_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String key;
      private int p2;
      private long p3;
      private String p4;
      private List<Integer> p5;
      private Map<String,String> p6;
      private MyData p7;
      public put_call(String key, int p2, long p3, String p4, List<Integer> p5, Map<String,String> p6, MyData p7, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.p2 = p2;
        this.p3 = p3;
        this.p4 = p4;
        this.p5 = p5;
        this.p6 = p6;
        this.p7 = p7;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("put", org.apache.thrift.protocol.TMessageType.CALL, 0));
        put_args args = new put_args();
        args.setKey(key);
        args.setP2(p2);
        args.setP3(p3);
        args.setP4(p4);
        args.setP5(p5);
        args.setP6(p6);
        args.setP7(p7);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_put();
      }
    }

    public void put2(String key, int p2, long p3, String p4, List<Integer> p5, Map<String,String> p6, MyData p7, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      put2_call method_call = new put2_call(key, p2, p3, p4, p5, p6, p7, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class put2_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String key;
      private int p2;
      private long p3;
      private String p4;
      private List<Integer> p5;
      private Map<String,String> p6;
      private MyData p7;
      public put2_call(String key, int p2, long p3, String p4, List<Integer> p5, Map<String,String> p6, MyData p7, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.key = key;
        this.p2 = p2;
        this.p3 = p3;
        this.p4 = p4;
        this.p5 = p5;
        this.p6 = p6;
        this.p7 = p7;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("put2", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        put2_args args = new put2_args();
        args.setKey(key);
        args.setP2(p2);
        args.setP3(p3);
        args.setP4(p4);
        args.setP5(p5);
        args.setP6(p6);
        args.setP7(p7);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void put3(String key, int p2, long p3, String p4, List<Integer> p5, Map<String,String> p6, MyData p7, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      put3_call method_call = new put3_call(key, p2, p3, p4, p5, p6, p7, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class put3_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String key;
      private int p2;
      private long p3;
      private String p4;
      private List<Integer> p5;
      private Map<String,String> p6;
      private MyData p7;
      public put3_call(String key, int p2, long p3, String p4, List<Integer> p5, Map<String,String> p6, MyData p7, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.p2 = p2;
        this.p3 = p3;
        this.p4 = p4;
        this.p5 = p5;
        this.p6 = p6;
        this.p7 = p7;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("put3", org.apache.thrift.protocol.TMessageType.CALL, 0));
        put3_args args = new put3_args();
        args.setKey(key);
        args.setP2(p2);
        args.setP3(p3);
        args.setP4(p4);
        args.setP5(p5);
        args.setP6(p6);
        args.setP7(p7);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_put3();
      }
    }

    public void get(String key, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_call method_call = new get_call(key, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String key;
      public get_call(String key, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_args args = new get_args();
        args.setKey(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MyValue getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("put", new put());
      processMap.put("put2", new put2());
      processMap.put("put3", new put3());
      processMap.put("get", new get());
      return processMap;
    }

    public static class put<I extends Iface> extends org.apache.thrift.ProcessFunction<I, put_args> {
      public put() {
        super("put");
      }

      public put_args getEmptyArgsInstance() {
        return new put_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public put_result getResult(I iface, put_args args) throws org.apache.thrift.TException {
        put_result result = new put_result();
        result.success = iface.put(args.key, args.p2, args.p3, args.p4, args.p5, args.p6, args.p7);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class put2<I extends Iface> extends org.apache.thrift.ProcessFunction<I, put2_args> {
      public put2() {
        super("put2");
      }

      public put2_args getEmptyArgsInstance() {
        return new put2_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, put2_args args) throws org.apache.thrift.TException {
        iface.put2(args.key, args.p2, args.p3, args.p4, args.p5, args.p6, args.p7);
        return null;
      }
    }

    public static class put3<I extends Iface> extends org.apache.thrift.ProcessFunction<I, put3_args> {
      public put3() {
        super("put3");
      }

      public put3_args getEmptyArgsInstance() {
        return new put3_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public put3_result getResult(I iface, put3_args args) throws org.apache.thrift.TException {
        put3_result result = new put3_result();
        result.success = iface.put3(args.key, args.p2, args.p3, args.p4, args.p5, args.p6, args.p7);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class get<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_args> {
      public get() {
        super("get");
      }

      public get_args getEmptyArgsInstance() {
        return new get_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_result getResult(I iface, get_args args) throws org.apache.thrift.TException {
        get_result result = new get_result();
        result.success = iface.get(args.key);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("put", new put());
      processMap.put("put2", new put2());
      processMap.put("put3", new put3());
      processMap.put("get", new get());
      return processMap;
    }

    public static class put<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, put_args, Long> {
      public put() {
        super("put");
      }

      public put_args getEmptyArgsInstance() {
        return new put_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            put_result result = new put_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            put_result result = new put_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, put_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.put(args.key, args.p2, args.p3, args.p4, args.p5, args.p6, args.p7,resultHandler);
      }
    }

    public static class put2<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, put2_args, Void> {
      public put2() {
        super("put2");
      }

      public put2_args getEmptyArgsInstance() {
        return new put2_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, put2_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.put2(args.key, args.p2, args.p3, args.p4, args.p5, args.p6, args.p7,resultHandler);
      }
    }

    public static class put3<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, put3_args, Long> {
      public put3() {
        super("put3");
      }

      public put3_args getEmptyArgsInstance() {
        return new put3_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            put3_result result = new put3_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            put3_result result = new put3_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, put3_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.put3(args.key, args.p2, args.p3, args.p4, args.p5, args.p6, args.p7,resultHandler);
      }
    }

    public static class get<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_args, MyValue> {
      public get() {
        super("get");
      }

      public get_args getEmptyArgsInstance() {
        return new get_args();
      }

      public AsyncMethodCallback<MyValue> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MyValue>() { 
          public void onComplete(MyValue o) {
            get_result result = new get_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_result result = new get_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_args args, org.apache.thrift.async.AsyncMethodCallback<MyValue> resultHandler) throws TException {
        iface.get(args.key,resultHandler);
      }
    }

  }

  public static class put_args implements org.apache.thrift.TBase<put_args, put_args._Fields>, java.io.Serializable, Cloneable, Comparable<put_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("put_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField P2_FIELD_DESC = new org.apache.thrift.protocol.TField("p2", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField P3_FIELD_DESC = new org.apache.thrift.protocol.TField("p3", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField P4_FIELD_DESC = new org.apache.thrift.protocol.TField("p4", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField P5_FIELD_DESC = new org.apache.thrift.protocol.TField("p5", org.apache.thrift.protocol.TType.LIST, (short)5);
    private static final org.apache.thrift.protocol.TField P6_FIELD_DESC = new org.apache.thrift.protocol.TField("p6", org.apache.thrift.protocol.TType.MAP, (short)6);
    private static final org.apache.thrift.protocol.TField P7_FIELD_DESC = new org.apache.thrift.protocol.TField("p7", org.apache.thrift.protocol.TType.STRUCT, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new put_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new put_argsTupleSchemeFactory());
    }

    public String key; // required
    public int p2; // required
    public long p3; // required
    public String p4; // required
    public List<Integer> p5; // required
    public Map<String,String> p6; // required
    public MyData p7; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key"),
      P2((short)2, "p2"),
      P3((short)3, "p3"),
      P4((short)4, "p4"),
      P5((short)5, "p5"),
      P6((short)6, "p6"),
      P7((short)7, "p7");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          case 2: // P2
            return P2;
          case 3: // P3
            return P3;
          case 4: // P4
            return P4;
          case 5: // P5
            return P5;
          case 6: // P6
            return P6;
          case 7: // P7
            return P7;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __P2_ISSET_ID = 0;
    private static final int __P3_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.P2, new org.apache.thrift.meta_data.FieldMetaData("p2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.P3, new org.apache.thrift.meta_data.FieldMetaData("p3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.P4, new org.apache.thrift.meta_data.FieldMetaData("p4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.P5, new org.apache.thrift.meta_data.FieldMetaData("p5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.P6, new org.apache.thrift.meta_data.FieldMetaData("p6", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.P7, new org.apache.thrift.meta_data.FieldMetaData("p7", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MyData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(put_args.class, metaDataMap);
    }

    public put_args() {
    }

    public put_args(
      String key,
      int p2,
      long p3,
      String p4,
      List<Integer> p5,
      Map<String,String> p6,
      MyData p7)
    {
      this();
      this.key = key;
      this.p2 = p2;
      setP2IsSet(true);
      this.p3 = p3;
      setP3IsSet(true);
      this.p4 = p4;
      this.p5 = p5;
      this.p6 = p6;
      this.p7 = p7;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public put_args(put_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetKey()) {
        this.key = other.key;
      }
      this.p2 = other.p2;
      this.p3 = other.p3;
      if (other.isSetP4()) {
        this.p4 = other.p4;
      }
      if (other.isSetP5()) {
        List<Integer> __this__p5 = new ArrayList<Integer>(other.p5);
        this.p5 = __this__p5;
      }
      if (other.isSetP6()) {
        Map<String,String> __this__p6 = new HashMap<String,String>(other.p6);
        this.p6 = __this__p6;
      }
      if (other.isSetP7()) {
        this.p7 = new MyData(other.p7);
      }
    }

    public put_args deepCopy() {
      return new put_args(this);
    }

    @Override
    public void clear() {
      this.key = null;
      setP2IsSet(false);
      this.p2 = 0;
      setP3IsSet(false);
      this.p3 = 0;
      this.p4 = null;
      this.p5 = null;
      this.p6 = null;
      this.p7 = null;
    }

    public String getKey() {
      return this.key;
    }

    public put_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public int getP2() {
      return this.p2;
    }

    public put_args setP2(int p2) {
      this.p2 = p2;
      setP2IsSet(true);
      return this;
    }

    public void unsetP2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __P2_ISSET_ID);
    }

    /** Returns true if field p2 is set (has been assigned a value) and false otherwise */
    public boolean isSetP2() {
      return EncodingUtils.testBit(__isset_bitfield, __P2_ISSET_ID);
    }

    public void setP2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __P2_ISSET_ID, value);
    }

    public long getP3() {
      return this.p3;
    }

    public put_args setP3(long p3) {
      this.p3 = p3;
      setP3IsSet(true);
      return this;
    }

    public void unsetP3() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __P3_ISSET_ID);
    }

    /** Returns true if field p3 is set (has been assigned a value) and false otherwise */
    public boolean isSetP3() {
      return EncodingUtils.testBit(__isset_bitfield, __P3_ISSET_ID);
    }

    public void setP3IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __P3_ISSET_ID, value);
    }

    public String getP4() {
      return this.p4;
    }

    public put_args setP4(String p4) {
      this.p4 = p4;
      return this;
    }

    public void unsetP4() {
      this.p4 = null;
    }

    /** Returns true if field p4 is set (has been assigned a value) and false otherwise */
    public boolean isSetP4() {
      return this.p4 != null;
    }

    public void setP4IsSet(boolean value) {
      if (!value) {
        this.p4 = null;
      }
    }

    public int getP5Size() {
      return (this.p5 == null) ? 0 : this.p5.size();
    }

    public java.util.Iterator<Integer> getP5Iterator() {
      return (this.p5 == null) ? null : this.p5.iterator();
    }

    public void addToP5(int elem) {
      if (this.p5 == null) {
        this.p5 = new ArrayList<Integer>();
      }
      this.p5.add(elem);
    }

    public List<Integer> getP5() {
      return this.p5;
    }

    public put_args setP5(List<Integer> p5) {
      this.p5 = p5;
      return this;
    }

    public void unsetP5() {
      this.p5 = null;
    }

    /** Returns true if field p5 is set (has been assigned a value) and false otherwise */
    public boolean isSetP5() {
      return this.p5 != null;
    }

    public void setP5IsSet(boolean value) {
      if (!value) {
        this.p5 = null;
      }
    }

    public int getP6Size() {
      return (this.p6 == null) ? 0 : this.p6.size();
    }

    public void putToP6(String key, String val) {
      if (this.p6 == null) {
        this.p6 = new HashMap<String,String>();
      }
      this.p6.put(key, val);
    }

    public Map<String,String> getP6() {
      return this.p6;
    }

    public put_args setP6(Map<String,String> p6) {
      this.p6 = p6;
      return this;
    }

    public void unsetP6() {
      this.p6 = null;
    }

    /** Returns true if field p6 is set (has been assigned a value) and false otherwise */
    public boolean isSetP6() {
      return this.p6 != null;
    }

    public void setP6IsSet(boolean value) {
      if (!value) {
        this.p6 = null;
      }
    }

    public MyData getP7() {
      return this.p7;
    }

    public put_args setP7(MyData p7) {
      this.p7 = p7;
      return this;
    }

    public void unsetP7() {
      this.p7 = null;
    }

    /** Returns true if field p7 is set (has been assigned a value) and false otherwise */
    public boolean isSetP7() {
      return this.p7 != null;
    }

    public void setP7IsSet(boolean value) {
      if (!value) {
        this.p7 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case P2:
        if (value == null) {
          unsetP2();
        } else {
          setP2((Integer)value);
        }
        break;

      case P3:
        if (value == null) {
          unsetP3();
        } else {
          setP3((Long)value);
        }
        break;

      case P4:
        if (value == null) {
          unsetP4();
        } else {
          setP4((String)value);
        }
        break;

      case P5:
        if (value == null) {
          unsetP5();
        } else {
          setP5((List<Integer>)value);
        }
        break;

      case P6:
        if (value == null) {
          unsetP6();
        } else {
          setP6((Map<String,String>)value);
        }
        break;

      case P7:
        if (value == null) {
          unsetP7();
        } else {
          setP7((MyData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      case P2:
        return getP2();

      case P3:
        return getP3();

      case P4:
        return getP4();

      case P5:
        return getP5();

      case P6:
        return getP6();

      case P7:
        return getP7();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      case P2:
        return isSetP2();
      case P3:
        return isSetP3();
      case P4:
        return isSetP4();
      case P5:
        return isSetP5();
      case P6:
        return isSetP6();
      case P7:
        return isSetP7();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof put_args)
        return this.equals((put_args)that);
      return false;
    }

    public boolean equals(put_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_p2 = true;
      boolean that_present_p2 = true;
      if (this_present_p2 || that_present_p2) {
        if (!(this_present_p2 && that_present_p2))
          return false;
        if (this.p2 != that.p2)
          return false;
      }

      boolean this_present_p3 = true;
      boolean that_present_p3 = true;
      if (this_present_p3 || that_present_p3) {
        if (!(this_present_p3 && that_present_p3))
          return false;
        if (this.p3 != that.p3)
          return false;
      }

      boolean this_present_p4 = true && this.isSetP4();
      boolean that_present_p4 = true && that.isSetP4();
      if (this_present_p4 || that_present_p4) {
        if (!(this_present_p4 && that_present_p4))
          return false;
        if (!this.p4.equals(that.p4))
          return false;
      }

      boolean this_present_p5 = true && this.isSetP5();
      boolean that_present_p5 = true && that.isSetP5();
      if (this_present_p5 || that_present_p5) {
        if (!(this_present_p5 && that_present_p5))
          return false;
        if (!this.p5.equals(that.p5))
          return false;
      }

      boolean this_present_p6 = true && this.isSetP6();
      boolean that_present_p6 = true && that.isSetP6();
      if (this_present_p6 || that_present_p6) {
        if (!(this_present_p6 && that_present_p6))
          return false;
        if (!this.p6.equals(that.p6))
          return false;
      }

      boolean this_present_p7 = true && this.isSetP7();
      boolean that_present_p7 = true && that.isSetP7();
      if (this_present_p7 || that_present_p7) {
        if (!(this_present_p7 && that_present_p7))
          return false;
        if (!this.p7.equals(that.p7))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_p2 = true;
      list.add(present_p2);
      if (present_p2)
        list.add(p2);

      boolean present_p3 = true;
      list.add(present_p3);
      if (present_p3)
        list.add(p3);

      boolean present_p4 = true && (isSetP4());
      list.add(present_p4);
      if (present_p4)
        list.add(p4);

      boolean present_p5 = true && (isSetP5());
      list.add(present_p5);
      if (present_p5)
        list.add(p5);

      boolean present_p6 = true && (isSetP6());
      list.add(present_p6);
      if (present_p6)
        list.add(p6);

      boolean present_p7 = true && (isSetP7());
      list.add(present_p7);
      if (present_p7)
        list.add(p7);

      return list.hashCode();
    }

    @Override
    public int compareTo(put_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP2()).compareTo(other.isSetP2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p2, other.p2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP3()).compareTo(other.isSetP3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p3, other.p3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP4()).compareTo(other.isSetP4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP4()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p4, other.p4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP5()).compareTo(other.isSetP5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP5()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p5, other.p5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP6()).compareTo(other.isSetP6());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP6()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p6, other.p6);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP7()).compareTo(other.isSetP7());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP7()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p7, other.p7);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("put_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p2:");
      sb.append(this.p2);
      first = false;
      if (!first) sb.append(", ");
      sb.append("p3:");
      sb.append(this.p3);
      first = false;
      if (!first) sb.append(", ");
      sb.append("p4:");
      if (this.p4 == null) {
        sb.append("null");
      } else {
        sb.append(this.p4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p5:");
      if (this.p5 == null) {
        sb.append("null");
      } else {
        sb.append(this.p5);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p6:");
      if (this.p6 == null) {
        sb.append("null");
      } else {
        sb.append(this.p6);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p7:");
      if (this.p7 == null) {
        sb.append("null");
      } else {
        sb.append(this.p7);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p7 != null) {
        p7.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class put_argsStandardSchemeFactory implements SchemeFactory {
      public put_argsStandardScheme getScheme() {
        return new put_argsStandardScheme();
      }
    }

    private static class put_argsStandardScheme extends StandardScheme<put_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, put_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // P2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.p2 = iprot.readI32();
                struct.setP2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // P3
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.p3 = iprot.readI64();
                struct.setP3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // P4
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.p4 = iprot.readString();
                struct.setP4IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // P5
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                  struct.p5 = new ArrayList<Integer>(_list26.size);
                  int _elem27;
                  for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                  {
                    _elem27 = iprot.readI32();
                    struct.p5.add(_elem27);
                  }
                  iprot.readListEnd();
                }
                struct.setP5IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // P6
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map29 = iprot.readMapBegin();
                  struct.p6 = new HashMap<String,String>(2*_map29.size);
                  String _key30;
                  String _val31;
                  for (int _i32 = 0; _i32 < _map29.size; ++_i32)
                  {
                    _key30 = iprot.readString();
                    _val31 = iprot.readString();
                    struct.p6.put(_key30, _val31);
                  }
                  iprot.readMapEnd();
                }
                struct.setP6IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // P7
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p7 = new MyData();
                struct.p7.read(iprot);
                struct.setP7IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, put_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(P2_FIELD_DESC);
        oprot.writeI32(struct.p2);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(P3_FIELD_DESC);
        oprot.writeI64(struct.p3);
        oprot.writeFieldEnd();
        if (struct.p4 != null) {
          oprot.writeFieldBegin(P4_FIELD_DESC);
          oprot.writeString(struct.p4);
          oprot.writeFieldEnd();
        }
        if (struct.p5 != null) {
          oprot.writeFieldBegin(P5_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.p5.size()));
            for (int _iter33 : struct.p5)
            {
              oprot.writeI32(_iter33);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.p6 != null) {
          oprot.writeFieldBegin(P6_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.p6.size()));
            for (Map.Entry<String, String> _iter34 : struct.p6.entrySet())
            {
              oprot.writeString(_iter34.getKey());
              oprot.writeString(_iter34.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.p7 != null) {
          oprot.writeFieldBegin(P7_FIELD_DESC);
          struct.p7.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class put_argsTupleSchemeFactory implements SchemeFactory {
      public put_argsTupleScheme getScheme() {
        return new put_argsTupleScheme();
      }
    }

    private static class put_argsTupleScheme extends TupleScheme<put_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, put_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        if (struct.isSetP2()) {
          optionals.set(1);
        }
        if (struct.isSetP3()) {
          optionals.set(2);
        }
        if (struct.isSetP4()) {
          optionals.set(3);
        }
        if (struct.isSetP5()) {
          optionals.set(4);
        }
        if (struct.isSetP6()) {
          optionals.set(5);
        }
        if (struct.isSetP7()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetP2()) {
          oprot.writeI32(struct.p2);
        }
        if (struct.isSetP3()) {
          oprot.writeI64(struct.p3);
        }
        if (struct.isSetP4()) {
          oprot.writeString(struct.p4);
        }
        if (struct.isSetP5()) {
          {
            oprot.writeI32(struct.p5.size());
            for (int _iter35 : struct.p5)
            {
              oprot.writeI32(_iter35);
            }
          }
        }
        if (struct.isSetP6()) {
          {
            oprot.writeI32(struct.p6.size());
            for (Map.Entry<String, String> _iter36 : struct.p6.entrySet())
            {
              oprot.writeString(_iter36.getKey());
              oprot.writeString(_iter36.getValue());
            }
          }
        }
        if (struct.isSetP7()) {
          struct.p7.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, put_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p2 = iprot.readI32();
          struct.setP2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.p3 = iprot.readI64();
          struct.setP3IsSet(true);
        }
        if (incoming.get(3)) {
          struct.p4 = iprot.readString();
          struct.setP4IsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.p5 = new ArrayList<Integer>(_list37.size);
            int _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = iprot.readI32();
              struct.p5.add(_elem38);
            }
          }
          struct.setP5IsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TMap _map40 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.p6 = new HashMap<String,String>(2*_map40.size);
            String _key41;
            String _val42;
            for (int _i43 = 0; _i43 < _map40.size; ++_i43)
            {
              _key41 = iprot.readString();
              _val42 = iprot.readString();
              struct.p6.put(_key41, _val42);
            }
          }
          struct.setP6IsSet(true);
        }
        if (incoming.get(6)) {
          struct.p7 = new MyData();
          struct.p7.read(iprot);
          struct.setP7IsSet(true);
        }
      }
    }

  }

  public static class put_result implements org.apache.thrift.TBase<put_result, put_result._Fields>, java.io.Serializable, Cloneable, Comparable<put_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("put_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new put_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new put_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(put_result.class, metaDataMap);
    }

    public put_result() {
    }

    public put_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public put_result(put_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public put_result deepCopy() {
      return new put_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public put_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof put_result)
        return this.equals((put_result)that);
      return false;
    }

    public boolean equals(put_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(put_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("put_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class put_resultStandardSchemeFactory implements SchemeFactory {
      public put_resultStandardScheme getScheme() {
        return new put_resultStandardScheme();
      }
    }

    private static class put_resultStandardScheme extends StandardScheme<put_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, put_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, put_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class put_resultTupleSchemeFactory implements SchemeFactory {
      public put_resultTupleScheme getScheme() {
        return new put_resultTupleScheme();
      }
    }

    private static class put_resultTupleScheme extends TupleScheme<put_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, put_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, put_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class put2_args implements org.apache.thrift.TBase<put2_args, put2_args._Fields>, java.io.Serializable, Cloneable, Comparable<put2_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("put2_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField P2_FIELD_DESC = new org.apache.thrift.protocol.TField("p2", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField P3_FIELD_DESC = new org.apache.thrift.protocol.TField("p3", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField P4_FIELD_DESC = new org.apache.thrift.protocol.TField("p4", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField P5_FIELD_DESC = new org.apache.thrift.protocol.TField("p5", org.apache.thrift.protocol.TType.LIST, (short)5);
    private static final org.apache.thrift.protocol.TField P6_FIELD_DESC = new org.apache.thrift.protocol.TField("p6", org.apache.thrift.protocol.TType.MAP, (short)6);
    private static final org.apache.thrift.protocol.TField P7_FIELD_DESC = new org.apache.thrift.protocol.TField("p7", org.apache.thrift.protocol.TType.STRUCT, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new put2_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new put2_argsTupleSchemeFactory());
    }

    public String key; // required
    public int p2; // required
    public long p3; // required
    public String p4; // required
    public List<Integer> p5; // required
    public Map<String,String> p6; // required
    public MyData p7; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key"),
      P2((short)2, "p2"),
      P3((short)3, "p3"),
      P4((short)4, "p4"),
      P5((short)5, "p5"),
      P6((short)6, "p6"),
      P7((short)7, "p7");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          case 2: // P2
            return P2;
          case 3: // P3
            return P3;
          case 4: // P4
            return P4;
          case 5: // P5
            return P5;
          case 6: // P6
            return P6;
          case 7: // P7
            return P7;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __P2_ISSET_ID = 0;
    private static final int __P3_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.P2, new org.apache.thrift.meta_data.FieldMetaData("p2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.P3, new org.apache.thrift.meta_data.FieldMetaData("p3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.P4, new org.apache.thrift.meta_data.FieldMetaData("p4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.P5, new org.apache.thrift.meta_data.FieldMetaData("p5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.P6, new org.apache.thrift.meta_data.FieldMetaData("p6", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.P7, new org.apache.thrift.meta_data.FieldMetaData("p7", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MyData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(put2_args.class, metaDataMap);
    }

    public put2_args() {
    }

    public put2_args(
      String key,
      int p2,
      long p3,
      String p4,
      List<Integer> p5,
      Map<String,String> p6,
      MyData p7)
    {
      this();
      this.key = key;
      this.p2 = p2;
      setP2IsSet(true);
      this.p3 = p3;
      setP3IsSet(true);
      this.p4 = p4;
      this.p5 = p5;
      this.p6 = p6;
      this.p7 = p7;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public put2_args(put2_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetKey()) {
        this.key = other.key;
      }
      this.p2 = other.p2;
      this.p3 = other.p3;
      if (other.isSetP4()) {
        this.p4 = other.p4;
      }
      if (other.isSetP5()) {
        List<Integer> __this__p5 = new ArrayList<Integer>(other.p5);
        this.p5 = __this__p5;
      }
      if (other.isSetP6()) {
        Map<String,String> __this__p6 = new HashMap<String,String>(other.p6);
        this.p6 = __this__p6;
      }
      if (other.isSetP7()) {
        this.p7 = new MyData(other.p7);
      }
    }

    public put2_args deepCopy() {
      return new put2_args(this);
    }

    @Override
    public void clear() {
      this.key = null;
      setP2IsSet(false);
      this.p2 = 0;
      setP3IsSet(false);
      this.p3 = 0;
      this.p4 = null;
      this.p5 = null;
      this.p6 = null;
      this.p7 = null;
    }

    public String getKey() {
      return this.key;
    }

    public put2_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public int getP2() {
      return this.p2;
    }

    public put2_args setP2(int p2) {
      this.p2 = p2;
      setP2IsSet(true);
      return this;
    }

    public void unsetP2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __P2_ISSET_ID);
    }

    /** Returns true if field p2 is set (has been assigned a value) and false otherwise */
    public boolean isSetP2() {
      return EncodingUtils.testBit(__isset_bitfield, __P2_ISSET_ID);
    }

    public void setP2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __P2_ISSET_ID, value);
    }

    public long getP3() {
      return this.p3;
    }

    public put2_args setP3(long p3) {
      this.p3 = p3;
      setP3IsSet(true);
      return this;
    }

    public void unsetP3() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __P3_ISSET_ID);
    }

    /** Returns true if field p3 is set (has been assigned a value) and false otherwise */
    public boolean isSetP3() {
      return EncodingUtils.testBit(__isset_bitfield, __P3_ISSET_ID);
    }

    public void setP3IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __P3_ISSET_ID, value);
    }

    public String getP4() {
      return this.p4;
    }

    public put2_args setP4(String p4) {
      this.p4 = p4;
      return this;
    }

    public void unsetP4() {
      this.p4 = null;
    }

    /** Returns true if field p4 is set (has been assigned a value) and false otherwise */
    public boolean isSetP4() {
      return this.p4 != null;
    }

    public void setP4IsSet(boolean value) {
      if (!value) {
        this.p4 = null;
      }
    }

    public int getP5Size() {
      return (this.p5 == null) ? 0 : this.p5.size();
    }

    public java.util.Iterator<Integer> getP5Iterator() {
      return (this.p5 == null) ? null : this.p5.iterator();
    }

    public void addToP5(int elem) {
      if (this.p5 == null) {
        this.p5 = new ArrayList<Integer>();
      }
      this.p5.add(elem);
    }

    public List<Integer> getP5() {
      return this.p5;
    }

    public put2_args setP5(List<Integer> p5) {
      this.p5 = p5;
      return this;
    }

    public void unsetP5() {
      this.p5 = null;
    }

    /** Returns true if field p5 is set (has been assigned a value) and false otherwise */
    public boolean isSetP5() {
      return this.p5 != null;
    }

    public void setP5IsSet(boolean value) {
      if (!value) {
        this.p5 = null;
      }
    }

    public int getP6Size() {
      return (this.p6 == null) ? 0 : this.p6.size();
    }

    public void putToP6(String key, String val) {
      if (this.p6 == null) {
        this.p6 = new HashMap<String,String>();
      }
      this.p6.put(key, val);
    }

    public Map<String,String> getP6() {
      return this.p6;
    }

    public put2_args setP6(Map<String,String> p6) {
      this.p6 = p6;
      return this;
    }

    public void unsetP6() {
      this.p6 = null;
    }

    /** Returns true if field p6 is set (has been assigned a value) and false otherwise */
    public boolean isSetP6() {
      return this.p6 != null;
    }

    public void setP6IsSet(boolean value) {
      if (!value) {
        this.p6 = null;
      }
    }

    public MyData getP7() {
      return this.p7;
    }

    public put2_args setP7(MyData p7) {
      this.p7 = p7;
      return this;
    }

    public void unsetP7() {
      this.p7 = null;
    }

    /** Returns true if field p7 is set (has been assigned a value) and false otherwise */
    public boolean isSetP7() {
      return this.p7 != null;
    }

    public void setP7IsSet(boolean value) {
      if (!value) {
        this.p7 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case P2:
        if (value == null) {
          unsetP2();
        } else {
          setP2((Integer)value);
        }
        break;

      case P3:
        if (value == null) {
          unsetP3();
        } else {
          setP3((Long)value);
        }
        break;

      case P4:
        if (value == null) {
          unsetP4();
        } else {
          setP4((String)value);
        }
        break;

      case P5:
        if (value == null) {
          unsetP5();
        } else {
          setP5((List<Integer>)value);
        }
        break;

      case P6:
        if (value == null) {
          unsetP6();
        } else {
          setP6((Map<String,String>)value);
        }
        break;

      case P7:
        if (value == null) {
          unsetP7();
        } else {
          setP7((MyData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      case P2:
        return getP2();

      case P3:
        return getP3();

      case P4:
        return getP4();

      case P5:
        return getP5();

      case P6:
        return getP6();

      case P7:
        return getP7();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      case P2:
        return isSetP2();
      case P3:
        return isSetP3();
      case P4:
        return isSetP4();
      case P5:
        return isSetP5();
      case P6:
        return isSetP6();
      case P7:
        return isSetP7();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof put2_args)
        return this.equals((put2_args)that);
      return false;
    }

    public boolean equals(put2_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_p2 = true;
      boolean that_present_p2 = true;
      if (this_present_p2 || that_present_p2) {
        if (!(this_present_p2 && that_present_p2))
          return false;
        if (this.p2 != that.p2)
          return false;
      }

      boolean this_present_p3 = true;
      boolean that_present_p3 = true;
      if (this_present_p3 || that_present_p3) {
        if (!(this_present_p3 && that_present_p3))
          return false;
        if (this.p3 != that.p3)
          return false;
      }

      boolean this_present_p4 = true && this.isSetP4();
      boolean that_present_p4 = true && that.isSetP4();
      if (this_present_p4 || that_present_p4) {
        if (!(this_present_p4 && that_present_p4))
          return false;
        if (!this.p4.equals(that.p4))
          return false;
      }

      boolean this_present_p5 = true && this.isSetP5();
      boolean that_present_p5 = true && that.isSetP5();
      if (this_present_p5 || that_present_p5) {
        if (!(this_present_p5 && that_present_p5))
          return false;
        if (!this.p5.equals(that.p5))
          return false;
      }

      boolean this_present_p6 = true && this.isSetP6();
      boolean that_present_p6 = true && that.isSetP6();
      if (this_present_p6 || that_present_p6) {
        if (!(this_present_p6 && that_present_p6))
          return false;
        if (!this.p6.equals(that.p6))
          return false;
      }

      boolean this_present_p7 = true && this.isSetP7();
      boolean that_present_p7 = true && that.isSetP7();
      if (this_present_p7 || that_present_p7) {
        if (!(this_present_p7 && that_present_p7))
          return false;
        if (!this.p7.equals(that.p7))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_p2 = true;
      list.add(present_p2);
      if (present_p2)
        list.add(p2);

      boolean present_p3 = true;
      list.add(present_p3);
      if (present_p3)
        list.add(p3);

      boolean present_p4 = true && (isSetP4());
      list.add(present_p4);
      if (present_p4)
        list.add(p4);

      boolean present_p5 = true && (isSetP5());
      list.add(present_p5);
      if (present_p5)
        list.add(p5);

      boolean present_p6 = true && (isSetP6());
      list.add(present_p6);
      if (present_p6)
        list.add(p6);

      boolean present_p7 = true && (isSetP7());
      list.add(present_p7);
      if (present_p7)
        list.add(p7);

      return list.hashCode();
    }

    @Override
    public int compareTo(put2_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP2()).compareTo(other.isSetP2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p2, other.p2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP3()).compareTo(other.isSetP3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p3, other.p3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP4()).compareTo(other.isSetP4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP4()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p4, other.p4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP5()).compareTo(other.isSetP5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP5()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p5, other.p5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP6()).compareTo(other.isSetP6());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP6()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p6, other.p6);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP7()).compareTo(other.isSetP7());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP7()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p7, other.p7);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("put2_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p2:");
      sb.append(this.p2);
      first = false;
      if (!first) sb.append(", ");
      sb.append("p3:");
      sb.append(this.p3);
      first = false;
      if (!first) sb.append(", ");
      sb.append("p4:");
      if (this.p4 == null) {
        sb.append("null");
      } else {
        sb.append(this.p4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p5:");
      if (this.p5 == null) {
        sb.append("null");
      } else {
        sb.append(this.p5);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p6:");
      if (this.p6 == null) {
        sb.append("null");
      } else {
        sb.append(this.p6);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p7:");
      if (this.p7 == null) {
        sb.append("null");
      } else {
        sb.append(this.p7);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p7 != null) {
        p7.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class put2_argsStandardSchemeFactory implements SchemeFactory {
      public put2_argsStandardScheme getScheme() {
        return new put2_argsStandardScheme();
      }
    }

    private static class put2_argsStandardScheme extends StandardScheme<put2_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, put2_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // P2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.p2 = iprot.readI32();
                struct.setP2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // P3
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.p3 = iprot.readI64();
                struct.setP3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // P4
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.p4 = iprot.readString();
                struct.setP4IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // P5
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                  struct.p5 = new ArrayList<Integer>(_list44.size);
                  int _elem45;
                  for (int _i46 = 0; _i46 < _list44.size; ++_i46)
                  {
                    _elem45 = iprot.readI32();
                    struct.p5.add(_elem45);
                  }
                  iprot.readListEnd();
                }
                struct.setP5IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // P6
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map47 = iprot.readMapBegin();
                  struct.p6 = new HashMap<String,String>(2*_map47.size);
                  String _key48;
                  String _val49;
                  for (int _i50 = 0; _i50 < _map47.size; ++_i50)
                  {
                    _key48 = iprot.readString();
                    _val49 = iprot.readString();
                    struct.p6.put(_key48, _val49);
                  }
                  iprot.readMapEnd();
                }
                struct.setP6IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // P7
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p7 = new MyData();
                struct.p7.read(iprot);
                struct.setP7IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, put2_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(P2_FIELD_DESC);
        oprot.writeI32(struct.p2);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(P3_FIELD_DESC);
        oprot.writeI64(struct.p3);
        oprot.writeFieldEnd();
        if (struct.p4 != null) {
          oprot.writeFieldBegin(P4_FIELD_DESC);
          oprot.writeString(struct.p4);
          oprot.writeFieldEnd();
        }
        if (struct.p5 != null) {
          oprot.writeFieldBegin(P5_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.p5.size()));
            for (int _iter51 : struct.p5)
            {
              oprot.writeI32(_iter51);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.p6 != null) {
          oprot.writeFieldBegin(P6_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.p6.size()));
            for (Map.Entry<String, String> _iter52 : struct.p6.entrySet())
            {
              oprot.writeString(_iter52.getKey());
              oprot.writeString(_iter52.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.p7 != null) {
          oprot.writeFieldBegin(P7_FIELD_DESC);
          struct.p7.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class put2_argsTupleSchemeFactory implements SchemeFactory {
      public put2_argsTupleScheme getScheme() {
        return new put2_argsTupleScheme();
      }
    }

    private static class put2_argsTupleScheme extends TupleScheme<put2_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, put2_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        if (struct.isSetP2()) {
          optionals.set(1);
        }
        if (struct.isSetP3()) {
          optionals.set(2);
        }
        if (struct.isSetP4()) {
          optionals.set(3);
        }
        if (struct.isSetP5()) {
          optionals.set(4);
        }
        if (struct.isSetP6()) {
          optionals.set(5);
        }
        if (struct.isSetP7()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetP2()) {
          oprot.writeI32(struct.p2);
        }
        if (struct.isSetP3()) {
          oprot.writeI64(struct.p3);
        }
        if (struct.isSetP4()) {
          oprot.writeString(struct.p4);
        }
        if (struct.isSetP5()) {
          {
            oprot.writeI32(struct.p5.size());
            for (int _iter53 : struct.p5)
            {
              oprot.writeI32(_iter53);
            }
          }
        }
        if (struct.isSetP6()) {
          {
            oprot.writeI32(struct.p6.size());
            for (Map.Entry<String, String> _iter54 : struct.p6.entrySet())
            {
              oprot.writeString(_iter54.getKey());
              oprot.writeString(_iter54.getValue());
            }
          }
        }
        if (struct.isSetP7()) {
          struct.p7.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, put2_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p2 = iprot.readI32();
          struct.setP2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.p3 = iprot.readI64();
          struct.setP3IsSet(true);
        }
        if (incoming.get(3)) {
          struct.p4 = iprot.readString();
          struct.setP4IsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.p5 = new ArrayList<Integer>(_list55.size);
            int _elem56;
            for (int _i57 = 0; _i57 < _list55.size; ++_i57)
            {
              _elem56 = iprot.readI32();
              struct.p5.add(_elem56);
            }
          }
          struct.setP5IsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TMap _map58 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.p6 = new HashMap<String,String>(2*_map58.size);
            String _key59;
            String _val60;
            for (int _i61 = 0; _i61 < _map58.size; ++_i61)
            {
              _key59 = iprot.readString();
              _val60 = iprot.readString();
              struct.p6.put(_key59, _val60);
            }
          }
          struct.setP6IsSet(true);
        }
        if (incoming.get(6)) {
          struct.p7 = new MyData();
          struct.p7.read(iprot);
          struct.setP7IsSet(true);
        }
      }
    }

  }

  public static class put3_args implements org.apache.thrift.TBase<put3_args, put3_args._Fields>, java.io.Serializable, Cloneable, Comparable<put3_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("put3_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField P2_FIELD_DESC = new org.apache.thrift.protocol.TField("p2", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField P3_FIELD_DESC = new org.apache.thrift.protocol.TField("p3", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField P4_FIELD_DESC = new org.apache.thrift.protocol.TField("p4", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField P5_FIELD_DESC = new org.apache.thrift.protocol.TField("p5", org.apache.thrift.protocol.TType.LIST, (short)5);
    private static final org.apache.thrift.protocol.TField P6_FIELD_DESC = new org.apache.thrift.protocol.TField("p6", org.apache.thrift.protocol.TType.MAP, (short)6);
    private static final org.apache.thrift.protocol.TField P7_FIELD_DESC = new org.apache.thrift.protocol.TField("p7", org.apache.thrift.protocol.TType.STRUCT, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new put3_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new put3_argsTupleSchemeFactory());
    }

    public String key; // required
    public int p2; // required
    public long p3; // required
    public String p4; // required
    public List<Integer> p5; // required
    public Map<String,String> p6; // required
    public MyData p7; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key"),
      P2((short)2, "p2"),
      P3((short)3, "p3"),
      P4((short)4, "p4"),
      P5((short)5, "p5"),
      P6((short)6, "p6"),
      P7((short)7, "p7");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          case 2: // P2
            return P2;
          case 3: // P3
            return P3;
          case 4: // P4
            return P4;
          case 5: // P5
            return P5;
          case 6: // P6
            return P6;
          case 7: // P7
            return P7;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __P2_ISSET_ID = 0;
    private static final int __P3_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.P2, new org.apache.thrift.meta_data.FieldMetaData("p2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.P3, new org.apache.thrift.meta_data.FieldMetaData("p3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.P4, new org.apache.thrift.meta_data.FieldMetaData("p4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.P5, new org.apache.thrift.meta_data.FieldMetaData("p5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.P6, new org.apache.thrift.meta_data.FieldMetaData("p6", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.P7, new org.apache.thrift.meta_data.FieldMetaData("p7", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MyData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(put3_args.class, metaDataMap);
    }

    public put3_args() {
    }

    public put3_args(
      String key,
      int p2,
      long p3,
      String p4,
      List<Integer> p5,
      Map<String,String> p6,
      MyData p7)
    {
      this();
      this.key = key;
      this.p2 = p2;
      setP2IsSet(true);
      this.p3 = p3;
      setP3IsSet(true);
      this.p4 = p4;
      this.p5 = p5;
      this.p6 = p6;
      this.p7 = p7;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public put3_args(put3_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetKey()) {
        this.key = other.key;
      }
      this.p2 = other.p2;
      this.p3 = other.p3;
      if (other.isSetP4()) {
        this.p4 = other.p4;
      }
      if (other.isSetP5()) {
        List<Integer> __this__p5 = new ArrayList<Integer>(other.p5);
        this.p5 = __this__p5;
      }
      if (other.isSetP6()) {
        Map<String,String> __this__p6 = new HashMap<String,String>(other.p6);
        this.p6 = __this__p6;
      }
      if (other.isSetP7()) {
        this.p7 = new MyData(other.p7);
      }
    }

    public put3_args deepCopy() {
      return new put3_args(this);
    }

    @Override
    public void clear() {
      this.key = null;
      setP2IsSet(false);
      this.p2 = 0;
      setP3IsSet(false);
      this.p3 = 0;
      this.p4 = null;
      this.p5 = null;
      this.p6 = null;
      this.p7 = null;
    }

    public String getKey() {
      return this.key;
    }

    public put3_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public int getP2() {
      return this.p2;
    }

    public put3_args setP2(int p2) {
      this.p2 = p2;
      setP2IsSet(true);
      return this;
    }

    public void unsetP2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __P2_ISSET_ID);
    }

    /** Returns true if field p2 is set (has been assigned a value) and false otherwise */
    public boolean isSetP2() {
      return EncodingUtils.testBit(__isset_bitfield, __P2_ISSET_ID);
    }

    public void setP2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __P2_ISSET_ID, value);
    }

    public long getP3() {
      return this.p3;
    }

    public put3_args setP3(long p3) {
      this.p3 = p3;
      setP3IsSet(true);
      return this;
    }

    public void unsetP3() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __P3_ISSET_ID);
    }

    /** Returns true if field p3 is set (has been assigned a value) and false otherwise */
    public boolean isSetP3() {
      return EncodingUtils.testBit(__isset_bitfield, __P3_ISSET_ID);
    }

    public void setP3IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __P3_ISSET_ID, value);
    }

    public String getP4() {
      return this.p4;
    }

    public put3_args setP4(String p4) {
      this.p4 = p4;
      return this;
    }

    public void unsetP4() {
      this.p4 = null;
    }

    /** Returns true if field p4 is set (has been assigned a value) and false otherwise */
    public boolean isSetP4() {
      return this.p4 != null;
    }

    public void setP4IsSet(boolean value) {
      if (!value) {
        this.p4 = null;
      }
    }

    public int getP5Size() {
      return (this.p5 == null) ? 0 : this.p5.size();
    }

    public java.util.Iterator<Integer> getP5Iterator() {
      return (this.p5 == null) ? null : this.p5.iterator();
    }

    public void addToP5(int elem) {
      if (this.p5 == null) {
        this.p5 = new ArrayList<Integer>();
      }
      this.p5.add(elem);
    }

    public List<Integer> getP5() {
      return this.p5;
    }

    public put3_args setP5(List<Integer> p5) {
      this.p5 = p5;
      return this;
    }

    public void unsetP5() {
      this.p5 = null;
    }

    /** Returns true if field p5 is set (has been assigned a value) and false otherwise */
    public boolean isSetP5() {
      return this.p5 != null;
    }

    public void setP5IsSet(boolean value) {
      if (!value) {
        this.p5 = null;
      }
    }

    public int getP6Size() {
      return (this.p6 == null) ? 0 : this.p6.size();
    }

    public void putToP6(String key, String val) {
      if (this.p6 == null) {
        this.p6 = new HashMap<String,String>();
      }
      this.p6.put(key, val);
    }

    public Map<String,String> getP6() {
      return this.p6;
    }

    public put3_args setP6(Map<String,String> p6) {
      this.p6 = p6;
      return this;
    }

    public void unsetP6() {
      this.p6 = null;
    }

    /** Returns true if field p6 is set (has been assigned a value) and false otherwise */
    public boolean isSetP6() {
      return this.p6 != null;
    }

    public void setP6IsSet(boolean value) {
      if (!value) {
        this.p6 = null;
      }
    }

    public MyData getP7() {
      return this.p7;
    }

    public put3_args setP7(MyData p7) {
      this.p7 = p7;
      return this;
    }

    public void unsetP7() {
      this.p7 = null;
    }

    /** Returns true if field p7 is set (has been assigned a value) and false otherwise */
    public boolean isSetP7() {
      return this.p7 != null;
    }

    public void setP7IsSet(boolean value) {
      if (!value) {
        this.p7 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case P2:
        if (value == null) {
          unsetP2();
        } else {
          setP2((Integer)value);
        }
        break;

      case P3:
        if (value == null) {
          unsetP3();
        } else {
          setP3((Long)value);
        }
        break;

      case P4:
        if (value == null) {
          unsetP4();
        } else {
          setP4((String)value);
        }
        break;

      case P5:
        if (value == null) {
          unsetP5();
        } else {
          setP5((List<Integer>)value);
        }
        break;

      case P6:
        if (value == null) {
          unsetP6();
        } else {
          setP6((Map<String,String>)value);
        }
        break;

      case P7:
        if (value == null) {
          unsetP7();
        } else {
          setP7((MyData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      case P2:
        return getP2();

      case P3:
        return getP3();

      case P4:
        return getP4();

      case P5:
        return getP5();

      case P6:
        return getP6();

      case P7:
        return getP7();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      case P2:
        return isSetP2();
      case P3:
        return isSetP3();
      case P4:
        return isSetP4();
      case P5:
        return isSetP5();
      case P6:
        return isSetP6();
      case P7:
        return isSetP7();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof put3_args)
        return this.equals((put3_args)that);
      return false;
    }

    public boolean equals(put3_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_p2 = true;
      boolean that_present_p2 = true;
      if (this_present_p2 || that_present_p2) {
        if (!(this_present_p2 && that_present_p2))
          return false;
        if (this.p2 != that.p2)
          return false;
      }

      boolean this_present_p3 = true;
      boolean that_present_p3 = true;
      if (this_present_p3 || that_present_p3) {
        if (!(this_present_p3 && that_present_p3))
          return false;
        if (this.p3 != that.p3)
          return false;
      }

      boolean this_present_p4 = true && this.isSetP4();
      boolean that_present_p4 = true && that.isSetP4();
      if (this_present_p4 || that_present_p4) {
        if (!(this_present_p4 && that_present_p4))
          return false;
        if (!this.p4.equals(that.p4))
          return false;
      }

      boolean this_present_p5 = true && this.isSetP5();
      boolean that_present_p5 = true && that.isSetP5();
      if (this_present_p5 || that_present_p5) {
        if (!(this_present_p5 && that_present_p5))
          return false;
        if (!this.p5.equals(that.p5))
          return false;
      }

      boolean this_present_p6 = true && this.isSetP6();
      boolean that_present_p6 = true && that.isSetP6();
      if (this_present_p6 || that_present_p6) {
        if (!(this_present_p6 && that_present_p6))
          return false;
        if (!this.p6.equals(that.p6))
          return false;
      }

      boolean this_present_p7 = true && this.isSetP7();
      boolean that_present_p7 = true && that.isSetP7();
      if (this_present_p7 || that_present_p7) {
        if (!(this_present_p7 && that_present_p7))
          return false;
        if (!this.p7.equals(that.p7))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_p2 = true;
      list.add(present_p2);
      if (present_p2)
        list.add(p2);

      boolean present_p3 = true;
      list.add(present_p3);
      if (present_p3)
        list.add(p3);

      boolean present_p4 = true && (isSetP4());
      list.add(present_p4);
      if (present_p4)
        list.add(p4);

      boolean present_p5 = true && (isSetP5());
      list.add(present_p5);
      if (present_p5)
        list.add(p5);

      boolean present_p6 = true && (isSetP6());
      list.add(present_p6);
      if (present_p6)
        list.add(p6);

      boolean present_p7 = true && (isSetP7());
      list.add(present_p7);
      if (present_p7)
        list.add(p7);

      return list.hashCode();
    }

    @Override
    public int compareTo(put3_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP2()).compareTo(other.isSetP2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p2, other.p2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP3()).compareTo(other.isSetP3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p3, other.p3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP4()).compareTo(other.isSetP4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP4()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p4, other.p4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP5()).compareTo(other.isSetP5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP5()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p5, other.p5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP6()).compareTo(other.isSetP6());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP6()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p6, other.p6);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP7()).compareTo(other.isSetP7());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP7()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p7, other.p7);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("put3_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p2:");
      sb.append(this.p2);
      first = false;
      if (!first) sb.append(", ");
      sb.append("p3:");
      sb.append(this.p3);
      first = false;
      if (!first) sb.append(", ");
      sb.append("p4:");
      if (this.p4 == null) {
        sb.append("null");
      } else {
        sb.append(this.p4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p5:");
      if (this.p5 == null) {
        sb.append("null");
      } else {
        sb.append(this.p5);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p6:");
      if (this.p6 == null) {
        sb.append("null");
      } else {
        sb.append(this.p6);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p7:");
      if (this.p7 == null) {
        sb.append("null");
      } else {
        sb.append(this.p7);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (p7 == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'p7' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (p7 != null) {
        p7.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class put3_argsStandardSchemeFactory implements SchemeFactory {
      public put3_argsStandardScheme getScheme() {
        return new put3_argsStandardScheme();
      }
    }

    private static class put3_argsStandardScheme extends StandardScheme<put3_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, put3_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // P2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.p2 = iprot.readI32();
                struct.setP2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // P3
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.p3 = iprot.readI64();
                struct.setP3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // P4
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.p4 = iprot.readString();
                struct.setP4IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // P5
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list62 = iprot.readListBegin();
                  struct.p5 = new ArrayList<Integer>(_list62.size);
                  int _elem63;
                  for (int _i64 = 0; _i64 < _list62.size; ++_i64)
                  {
                    _elem63 = iprot.readI32();
                    struct.p5.add(_elem63);
                  }
                  iprot.readListEnd();
                }
                struct.setP5IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // P6
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map65 = iprot.readMapBegin();
                  struct.p6 = new HashMap<String,String>(2*_map65.size);
                  String _key66;
                  String _val67;
                  for (int _i68 = 0; _i68 < _map65.size; ++_i68)
                  {
                    _key66 = iprot.readString();
                    _val67 = iprot.readString();
                    struct.p6.put(_key66, _val67);
                  }
                  iprot.readMapEnd();
                }
                struct.setP6IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // P7
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p7 = new MyData();
                struct.p7.read(iprot);
                struct.setP7IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, put3_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(P2_FIELD_DESC);
        oprot.writeI32(struct.p2);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(P3_FIELD_DESC);
        oprot.writeI64(struct.p3);
        oprot.writeFieldEnd();
        if (struct.p4 != null) {
          oprot.writeFieldBegin(P4_FIELD_DESC);
          oprot.writeString(struct.p4);
          oprot.writeFieldEnd();
        }
        if (struct.p5 != null) {
          oprot.writeFieldBegin(P5_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.p5.size()));
            for (int _iter69 : struct.p5)
            {
              oprot.writeI32(_iter69);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.p6 != null) {
          oprot.writeFieldBegin(P6_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.p6.size()));
            for (Map.Entry<String, String> _iter70 : struct.p6.entrySet())
            {
              oprot.writeString(_iter70.getKey());
              oprot.writeString(_iter70.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.p7 != null) {
          oprot.writeFieldBegin(P7_FIELD_DESC);
          struct.p7.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class put3_argsTupleSchemeFactory implements SchemeFactory {
      public put3_argsTupleScheme getScheme() {
        return new put3_argsTupleScheme();
      }
    }

    private static class put3_argsTupleScheme extends TupleScheme<put3_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, put3_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.p7.write(oprot);
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        if (struct.isSetP2()) {
          optionals.set(1);
        }
        if (struct.isSetP3()) {
          optionals.set(2);
        }
        if (struct.isSetP4()) {
          optionals.set(3);
        }
        if (struct.isSetP5()) {
          optionals.set(4);
        }
        if (struct.isSetP6()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetP2()) {
          oprot.writeI32(struct.p2);
        }
        if (struct.isSetP3()) {
          oprot.writeI64(struct.p3);
        }
        if (struct.isSetP4()) {
          oprot.writeString(struct.p4);
        }
        if (struct.isSetP5()) {
          {
            oprot.writeI32(struct.p5.size());
            for (int _iter71 : struct.p5)
            {
              oprot.writeI32(_iter71);
            }
          }
        }
        if (struct.isSetP6()) {
          {
            oprot.writeI32(struct.p6.size());
            for (Map.Entry<String, String> _iter72 : struct.p6.entrySet())
            {
              oprot.writeString(_iter72.getKey());
              oprot.writeString(_iter72.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, put3_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.p7 = new MyData();
        struct.p7.read(iprot);
        struct.setP7IsSet(true);
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p2 = iprot.readI32();
          struct.setP2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.p3 = iprot.readI64();
          struct.setP3IsSet(true);
        }
        if (incoming.get(3)) {
          struct.p4 = iprot.readString();
          struct.setP4IsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list73 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.p5 = new ArrayList<Integer>(_list73.size);
            int _elem74;
            for (int _i75 = 0; _i75 < _list73.size; ++_i75)
            {
              _elem74 = iprot.readI32();
              struct.p5.add(_elem74);
            }
          }
          struct.setP5IsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TMap _map76 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.p6 = new HashMap<String,String>(2*_map76.size);
            String _key77;
            String _val78;
            for (int _i79 = 0; _i79 < _map76.size; ++_i79)
            {
              _key77 = iprot.readString();
              _val78 = iprot.readString();
              struct.p6.put(_key77, _val78);
            }
          }
          struct.setP6IsSet(true);
        }
      }
    }

  }

  public static class put3_result implements org.apache.thrift.TBase<put3_result, put3_result._Fields>, java.io.Serializable, Cloneable, Comparable<put3_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("put3_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new put3_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new put3_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(put3_result.class, metaDataMap);
    }

    public put3_result() {
    }

    public put3_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public put3_result(put3_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public put3_result deepCopy() {
      return new put3_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public put3_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof put3_result)
        return this.equals((put3_result)that);
      return false;
    }

    public boolean equals(put3_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(put3_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("put3_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class put3_resultStandardSchemeFactory implements SchemeFactory {
      public put3_resultStandardScheme getScheme() {
        return new put3_resultStandardScheme();
      }
    }

    private static class put3_resultStandardScheme extends StandardScheme<put3_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, put3_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, put3_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class put3_resultTupleSchemeFactory implements SchemeFactory {
      public put3_resultTupleScheme getScheme() {
        return new put3_resultTupleScheme();
      }
    }

    private static class put3_resultTupleScheme extends TupleScheme<put3_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, put3_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, put3_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_args implements org.apache.thrift.TBase<get_args, get_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_argsTupleSchemeFactory());
    }

    public String key; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_args.class, metaDataMap);
    }

    public get_args() {
    }

    public get_args(
      String key)
    {
      this();
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_args(get_args other) {
      if (other.isSetKey()) {
        this.key = other.key;
      }
    }

    public get_args deepCopy() {
      return new get_args(this);
    }

    @Override
    public void clear() {
      this.key = null;
    }

    public String getKey() {
      return this.key;
    }

    public get_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_args)
        return this.equals((get_args)that);
      return false;
    }

    public boolean equals(get_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_argsStandardSchemeFactory implements SchemeFactory {
      public get_argsStandardScheme getScheme() {
        return new get_argsStandardScheme();
      }
    }

    private static class get_argsStandardScheme extends StandardScheme<get_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_argsTupleSchemeFactory implements SchemeFactory {
      public get_argsTupleScheme getScheme() {
        return new get_argsTupleScheme();
      }
    }

    private static class get_argsTupleScheme extends TupleScheme<get_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
      }
    }

  }

  public static class get_result implements org.apache.thrift.TBase<get_result, get_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_resultTupleSchemeFactory());
    }

    public MyValue success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MyValue.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_result.class, metaDataMap);
    }

    public get_result() {
    }

    public get_result(
      MyValue success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_result(get_result other) {
      if (other.isSetSuccess()) {
        this.success = new MyValue(other.success);
      }
    }

    public get_result deepCopy() {
      return new get_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MyValue getSuccess() {
      return this.success;
    }

    public get_result setSuccess(MyValue success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MyValue)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_result)
        return this.equals((get_result)that);
      return false;
    }

    public boolean equals(get_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_resultStandardSchemeFactory implements SchemeFactory {
      public get_resultStandardScheme getScheme() {
        return new get_resultStandardScheme();
      }
    }

    private static class get_resultStandardScheme extends StandardScheme<get_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MyValue();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_resultTupleSchemeFactory implements SchemeFactory {
      public get_resultTupleScheme getScheme() {
        return new get_resultTupleScheme();
      }
    }

    private static class get_resultTupleScheme extends TupleScheme<get_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MyValue();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
