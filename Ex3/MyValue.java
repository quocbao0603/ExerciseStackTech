/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package basictutorial;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2021-10-27")
public class MyValue implements org.apache.thrift.TBase<MyValue, MyValue._Fields>, java.io.Serializable, Cloneable, Comparable<MyValue> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MyValue");

  private static final org.apache.thrift.protocol.TField P2_FIELD_DESC = new org.apache.thrift.protocol.TField("p2", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField P3_FIELD_DESC = new org.apache.thrift.protocol.TField("p3", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField P4_FIELD_DESC = new org.apache.thrift.protocol.TField("p4", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField P5_FIELD_DESC = new org.apache.thrift.protocol.TField("p5", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField P6_FIELD_DESC = new org.apache.thrift.protocol.TField("p6", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField P7_FIELD_DESC = new org.apache.thrift.protocol.TField("p7", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField ERR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("errCode", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MyValueStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MyValueTupleSchemeFactory());
  }

  public int p2; // required
  public long p3; // required
  public String p4; // required
  public List<Integer> p5; // required
  public Map<String,String> p6; // required
  public MyData p7; // required
  public int errCode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    P2((short)1, "p2"),
    P3((short)2, "p3"),
    P4((short)3, "p4"),
    P5((short)4, "p5"),
    P6((short)5, "p6"),
    P7((short)6, "p7"),
    ERR_CODE((short)7, "errCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // P2
          return P2;
        case 2: // P3
          return P3;
        case 3: // P4
          return P4;
        case 4: // P5
          return P5;
        case 5: // P6
          return P6;
        case 6: // P7
          return P7;
        case 7: // ERR_CODE
          return ERR_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __P2_ISSET_ID = 0;
  private static final int __P3_ISSET_ID = 1;
  private static final int __ERRCODE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.P2, new org.apache.thrift.meta_data.FieldMetaData("p2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.P3, new org.apache.thrift.meta_data.FieldMetaData("p3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.P4, new org.apache.thrift.meta_data.FieldMetaData("p4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.P5, new org.apache.thrift.meta_data.FieldMetaData("p5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.P6, new org.apache.thrift.meta_data.FieldMetaData("p6", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.P7, new org.apache.thrift.meta_data.FieldMetaData("p7", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MyData.class)));
    tmpMap.put(_Fields.ERR_CODE, new org.apache.thrift.meta_data.FieldMetaData("errCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MyValue.class, metaDataMap);
  }

  public MyValue() {
  }

  public MyValue(
    int p2,
    long p3,
    String p4,
    List<Integer> p5,
    Map<String,String> p6,
    MyData p7,
    int errCode)
  {
    this();
    this.p2 = p2;
    setP2IsSet(true);
    this.p3 = p3;
    setP3IsSet(true);
    this.p4 = p4;
    this.p5 = p5;
    this.p6 = p6;
    this.p7 = p7;
    this.errCode = errCode;
    setErrCodeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MyValue(MyValue other) {
    __isset_bitfield = other.__isset_bitfield;
    this.p2 = other.p2;
    this.p3 = other.p3;
    if (other.isSetP4()) {
      this.p4 = other.p4;
    }
    if (other.isSetP5()) {
      List<Integer> __this__p5 = new ArrayList<Integer>(other.p5);
      this.p5 = __this__p5;
    }
    if (other.isSetP6()) {
      Map<String,String> __this__p6 = new HashMap<String,String>(other.p6);
      this.p6 = __this__p6;
    }
    if (other.isSetP7()) {
      this.p7 = new MyData(other.p7);
    }
    this.errCode = other.errCode;
  }

  public MyValue deepCopy() {
    return new MyValue(this);
  }

  @Override
  public void clear() {
    setP2IsSet(false);
    this.p2 = 0;
    setP3IsSet(false);
    this.p3 = 0;
    this.p4 = null;
    this.p5 = null;
    this.p6 = null;
    this.p7 = null;
    setErrCodeIsSet(false);
    this.errCode = 0;
  }

  public int getP2() {
    return this.p2;
  }

  public MyValue setP2(int p2) {
    this.p2 = p2;
    setP2IsSet(true);
    return this;
  }

  public void unsetP2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __P2_ISSET_ID);
  }

  /** Returns true if field p2 is set (has been assigned a value) and false otherwise */
  public boolean isSetP2() {
    return EncodingUtils.testBit(__isset_bitfield, __P2_ISSET_ID);
  }

  public void setP2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __P2_ISSET_ID, value);
  }

  public long getP3() {
    return this.p3;
  }

  public MyValue setP3(long p3) {
    this.p3 = p3;
    setP3IsSet(true);
    return this;
  }

  public void unsetP3() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __P3_ISSET_ID);
  }

  /** Returns true if field p3 is set (has been assigned a value) and false otherwise */
  public boolean isSetP3() {
    return EncodingUtils.testBit(__isset_bitfield, __P3_ISSET_ID);
  }

  public void setP3IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __P3_ISSET_ID, value);
  }

  public String getP4() {
    return this.p4;
  }

  public MyValue setP4(String p4) {
    this.p4 = p4;
    return this;
  }

  public void unsetP4() {
    this.p4 = null;
  }

  /** Returns true if field p4 is set (has been assigned a value) and false otherwise */
  public boolean isSetP4() {
    return this.p4 != null;
  }

  public void setP4IsSet(boolean value) {
    if (!value) {
      this.p4 = null;
    }
  }

  public int getP5Size() {
    return (this.p5 == null) ? 0 : this.p5.size();
  }

  public java.util.Iterator<Integer> getP5Iterator() {
    return (this.p5 == null) ? null : this.p5.iterator();
  }

  public void addToP5(int elem) {
    if (this.p5 == null) {
      this.p5 = new ArrayList<Integer>();
    }
    this.p5.add(elem);
  }

  public List<Integer> getP5() {
    return this.p5;
  }

  public MyValue setP5(List<Integer> p5) {
    this.p5 = p5;
    return this;
  }

  public void unsetP5() {
    this.p5 = null;
  }

  /** Returns true if field p5 is set (has been assigned a value) and false otherwise */
  public boolean isSetP5() {
    return this.p5 != null;
  }

  public void setP5IsSet(boolean value) {
    if (!value) {
      this.p5 = null;
    }
  }

  public int getP6Size() {
    return (this.p6 == null) ? 0 : this.p6.size();
  }

  public void putToP6(String key, String val) {
    if (this.p6 == null) {
      this.p6 = new HashMap<String,String>();
    }
    this.p6.put(key, val);
  }

  public Map<String,String> getP6() {
    return this.p6;
  }

  public MyValue setP6(Map<String,String> p6) {
    this.p6 = p6;
    return this;
  }

  public void unsetP6() {
    this.p6 = null;
  }

  /** Returns true if field p6 is set (has been assigned a value) and false otherwise */
  public boolean isSetP6() {
    return this.p6 != null;
  }

  public void setP6IsSet(boolean value) {
    if (!value) {
      this.p6 = null;
    }
  }

  public MyData getP7() {
    return this.p7;
  }

  public MyValue setP7(MyData p7) {
    this.p7 = p7;
    return this;
  }

  public void unsetP7() {
    this.p7 = null;
  }

  /** Returns true if field p7 is set (has been assigned a value) and false otherwise */
  public boolean isSetP7() {
    return this.p7 != null;
  }

  public void setP7IsSet(boolean value) {
    if (!value) {
      this.p7 = null;
    }
  }

  public int getErrCode() {
    return this.errCode;
  }

  public MyValue setErrCode(int errCode) {
    this.errCode = errCode;
    setErrCodeIsSet(true);
    return this;
  }

  public void unsetErrCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ERRCODE_ISSET_ID);
  }

  /** Returns true if field errCode is set (has been assigned a value) and false otherwise */
  public boolean isSetErrCode() {
    return EncodingUtils.testBit(__isset_bitfield, __ERRCODE_ISSET_ID);
  }

  public void setErrCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ERRCODE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case P2:
      if (value == null) {
        unsetP2();
      } else {
        setP2((Integer)value);
      }
      break;

    case P3:
      if (value == null) {
        unsetP3();
      } else {
        setP3((Long)value);
      }
      break;

    case P4:
      if (value == null) {
        unsetP4();
      } else {
        setP4((String)value);
      }
      break;

    case P5:
      if (value == null) {
        unsetP5();
      } else {
        setP5((List<Integer>)value);
      }
      break;

    case P6:
      if (value == null) {
        unsetP6();
      } else {
        setP6((Map<String,String>)value);
      }
      break;

    case P7:
      if (value == null) {
        unsetP7();
      } else {
        setP7((MyData)value);
      }
      break;

    case ERR_CODE:
      if (value == null) {
        unsetErrCode();
      } else {
        setErrCode((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case P2:
      return getP2();

    case P3:
      return getP3();

    case P4:
      return getP4();

    case P5:
      return getP5();

    case P6:
      return getP6();

    case P7:
      return getP7();

    case ERR_CODE:
      return getErrCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case P2:
      return isSetP2();
    case P3:
      return isSetP3();
    case P4:
      return isSetP4();
    case P5:
      return isSetP5();
    case P6:
      return isSetP6();
    case P7:
      return isSetP7();
    case ERR_CODE:
      return isSetErrCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MyValue)
      return this.equals((MyValue)that);
    return false;
  }

  public boolean equals(MyValue that) {
    if (that == null)
      return false;

    boolean this_present_p2 = true;
    boolean that_present_p2 = true;
    if (this_present_p2 || that_present_p2) {
      if (!(this_present_p2 && that_present_p2))
        return false;
      if (this.p2 != that.p2)
        return false;
    }

    boolean this_present_p3 = true;
    boolean that_present_p3 = true;
    if (this_present_p3 || that_present_p3) {
      if (!(this_present_p3 && that_present_p3))
        return false;
      if (this.p3 != that.p3)
        return false;
    }

    boolean this_present_p4 = true && this.isSetP4();
    boolean that_present_p4 = true && that.isSetP4();
    if (this_present_p4 || that_present_p4) {
      if (!(this_present_p4 && that_present_p4))
        return false;
      if (!this.p4.equals(that.p4))
        return false;
    }

    boolean this_present_p5 = true && this.isSetP5();
    boolean that_present_p5 = true && that.isSetP5();
    if (this_present_p5 || that_present_p5) {
      if (!(this_present_p5 && that_present_p5))
        return false;
      if (!this.p5.equals(that.p5))
        return false;
    }

    boolean this_present_p6 = true && this.isSetP6();
    boolean that_present_p6 = true && that.isSetP6();
    if (this_present_p6 || that_present_p6) {
      if (!(this_present_p6 && that_present_p6))
        return false;
      if (!this.p6.equals(that.p6))
        return false;
    }

    boolean this_present_p7 = true && this.isSetP7();
    boolean that_present_p7 = true && that.isSetP7();
    if (this_present_p7 || that_present_p7) {
      if (!(this_present_p7 && that_present_p7))
        return false;
      if (!this.p7.equals(that.p7))
        return false;
    }

    boolean this_present_errCode = true;
    boolean that_present_errCode = true;
    if (this_present_errCode || that_present_errCode) {
      if (!(this_present_errCode && that_present_errCode))
        return false;
      if (this.errCode != that.errCode)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_p2 = true;
    list.add(present_p2);
    if (present_p2)
      list.add(p2);

    boolean present_p3 = true;
    list.add(present_p3);
    if (present_p3)
      list.add(p3);

    boolean present_p4 = true && (isSetP4());
    list.add(present_p4);
    if (present_p4)
      list.add(p4);

    boolean present_p5 = true && (isSetP5());
    list.add(present_p5);
    if (present_p5)
      list.add(p5);

    boolean present_p6 = true && (isSetP6());
    list.add(present_p6);
    if (present_p6)
      list.add(p6);

    boolean present_p7 = true && (isSetP7());
    list.add(present_p7);
    if (present_p7)
      list.add(p7);

    boolean present_errCode = true;
    list.add(present_errCode);
    if (present_errCode)
      list.add(errCode);

    return list.hashCode();
  }

  @Override
  public int compareTo(MyValue other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetP2()).compareTo(other.isSetP2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetP2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p2, other.p2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetP3()).compareTo(other.isSetP3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetP3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p3, other.p3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetP4()).compareTo(other.isSetP4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetP4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p4, other.p4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetP5()).compareTo(other.isSetP5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetP5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p5, other.p5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetP6()).compareTo(other.isSetP6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetP6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p6, other.p6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetP7()).compareTo(other.isSetP7());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetP7()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p7, other.p7);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrCode()).compareTo(other.isSetErrCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errCode, other.errCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MyValue(");
    boolean first = true;

    sb.append("p2:");
    sb.append(this.p2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("p3:");
    sb.append(this.p3);
    first = false;
    if (!first) sb.append(", ");
    sb.append("p4:");
    if (this.p4 == null) {
      sb.append("null");
    } else {
      sb.append(this.p4);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("p5:");
    if (this.p5 == null) {
      sb.append("null");
    } else {
      sb.append(this.p5);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("p6:");
    if (this.p6 == null) {
      sb.append("null");
    } else {
      sb.append(this.p6);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("p7:");
    if (this.p7 == null) {
      sb.append("null");
    } else {
      sb.append(this.p7);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("errCode:");
    sb.append(this.errCode);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (p7 != null) {
      p7.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MyValueStandardSchemeFactory implements SchemeFactory {
    public MyValueStandardScheme getScheme() {
      return new MyValueStandardScheme();
    }
  }

  private static class MyValueStandardScheme extends StandardScheme<MyValue> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MyValue struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // P2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.p2 = iprot.readI32();
              struct.setP2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // P3
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.p3 = iprot.readI64();
              struct.setP3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // P4
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.p4 = iprot.readString();
              struct.setP4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // P5
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.p5 = new ArrayList<Integer>(_list8.size);
                int _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = iprot.readI32();
                  struct.p5.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setP5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // P6
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map11 = iprot.readMapBegin();
                struct.p6 = new HashMap<String,String>(2*_map11.size);
                String _key12;
                String _val13;
                for (int _i14 = 0; _i14 < _map11.size; ++_i14)
                {
                  _key12 = iprot.readString();
                  _val13 = iprot.readString();
                  struct.p6.put(_key12, _val13);
                }
                iprot.readMapEnd();
              }
              struct.setP6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // P7
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.p7 = new MyData();
              struct.p7.read(iprot);
              struct.setP7IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ERR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.errCode = iprot.readI32();
              struct.setErrCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MyValue struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(P2_FIELD_DESC);
      oprot.writeI32(struct.p2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(P3_FIELD_DESC);
      oprot.writeI64(struct.p3);
      oprot.writeFieldEnd();
      if (struct.p4 != null) {
        oprot.writeFieldBegin(P4_FIELD_DESC);
        oprot.writeString(struct.p4);
        oprot.writeFieldEnd();
      }
      if (struct.p5 != null) {
        oprot.writeFieldBegin(P5_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.p5.size()));
          for (int _iter15 : struct.p5)
          {
            oprot.writeI32(_iter15);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.p6 != null) {
        oprot.writeFieldBegin(P6_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.p6.size()));
          for (Map.Entry<String, String> _iter16 : struct.p6.entrySet())
          {
            oprot.writeString(_iter16.getKey());
            oprot.writeString(_iter16.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.p7 != null) {
        oprot.writeFieldBegin(P7_FIELD_DESC);
        struct.p7.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ERR_CODE_FIELD_DESC);
      oprot.writeI32(struct.errCode);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MyValueTupleSchemeFactory implements SchemeFactory {
    public MyValueTupleScheme getScheme() {
      return new MyValueTupleScheme();
    }
  }

  private static class MyValueTupleScheme extends TupleScheme<MyValue> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MyValue struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetP2()) {
        optionals.set(0);
      }
      if (struct.isSetP3()) {
        optionals.set(1);
      }
      if (struct.isSetP4()) {
        optionals.set(2);
      }
      if (struct.isSetP5()) {
        optionals.set(3);
      }
      if (struct.isSetP6()) {
        optionals.set(4);
      }
      if (struct.isSetP7()) {
        optionals.set(5);
      }
      if (struct.isSetErrCode()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetP2()) {
        oprot.writeI32(struct.p2);
      }
      if (struct.isSetP3()) {
        oprot.writeI64(struct.p3);
      }
      if (struct.isSetP4()) {
        oprot.writeString(struct.p4);
      }
      if (struct.isSetP5()) {
        {
          oprot.writeI32(struct.p5.size());
          for (int _iter17 : struct.p5)
          {
            oprot.writeI32(_iter17);
          }
        }
      }
      if (struct.isSetP6()) {
        {
          oprot.writeI32(struct.p6.size());
          for (Map.Entry<String, String> _iter18 : struct.p6.entrySet())
          {
            oprot.writeString(_iter18.getKey());
            oprot.writeString(_iter18.getValue());
          }
        }
      }
      if (struct.isSetP7()) {
        struct.p7.write(oprot);
      }
      if (struct.isSetErrCode()) {
        oprot.writeI32(struct.errCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MyValue struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.p2 = iprot.readI32();
        struct.setP2IsSet(true);
      }
      if (incoming.get(1)) {
        struct.p3 = iprot.readI64();
        struct.setP3IsSet(true);
      }
      if (incoming.get(2)) {
        struct.p4 = iprot.readString();
        struct.setP4IsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list19 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.p5 = new ArrayList<Integer>(_list19.size);
          int _elem20;
          for (int _i21 = 0; _i21 < _list19.size; ++_i21)
          {
            _elem20 = iprot.readI32();
            struct.p5.add(_elem20);
          }
        }
        struct.setP5IsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.p6 = new HashMap<String,String>(2*_map22.size);
          String _key23;
          String _val24;
          for (int _i25 = 0; _i25 < _map22.size; ++_i25)
          {
            _key23 = iprot.readString();
            _val24 = iprot.readString();
            struct.p6.put(_key23, _val24);
          }
        }
        struct.setP6IsSet(true);
      }
      if (incoming.get(5)) {
        struct.p7 = new MyData();
        struct.p7.read(iprot);
        struct.setP7IsSet(true);
      }
      if (incoming.get(6)) {
        struct.errCode = iprot.readI32();
        struct.setErrCodeIsSet(true);
      }
    }
  }

}

